"use strict";

function generateStubs(object) {
    console.log(heredoc(function() {/*
// Code generated by pbrpc.js. DO NOT EDIT.

"use strict";

var protobuf = require("protobufjs/minimal");
var root;

if ("default" in protobuf.roots) {
    root = protobuf.roots.default;
} else {
    root = {};
    protobuf.roots.default = root;
}

var exports = {};
*/}));

    doGenerateStubs("", object);

    console.log(heredoc(function() {/*

module.exports = exports;
*/}));
}

function doGenerateStubs(objectPath, object) {
    if ("methods" in object) {
        var serviceFullName = objectPath.substr(1).replace(/Service$/, "");
        var serviceName = serviceFullName.substr(serviceFullName.lastIndexOf(".") + 1);
        var methods = object.methods;
        processService(serviceFullName, serviceName, methods);
    }

    if ("nested" in object) {
        Object.keys(object.nested).forEach(function(subObjectName) {
            var subObject = object.nested[subObjectName]
            doGenerateStubs(objectPath + "." + subObjectName, subObject);
        });
    }
}

function processService(serviceFullName, serviceName, methods) {
    generateServiceClient(serviceFullName, serviceName, methods);
    generateServiceHandler(serviceFullName, serviceName, methods);
}

function generateServiceClient(serviceFullName, serviceName, methods) {
    console.log(heredoc(function() {/*

function %sServiceClient(channel) {
    this.channel = channel;
}
*/}), serviceName);

    Object.keys(methods).forEach(function(methodName) {
        var method = methods[methodName];

        console.log(heredoc(function() {/*

%sServiceClient.prototype.%s = function(request, callback, autoRetry) {
    if (autoRetry == undefined) {
        autoRetry = false;
    }

    var requestType = root.%s;
    var errorMessage = requestType.verify(request);

    if (errorMessage != null) {
        throw Error(errorMessage);
    }

    var requestPayload = requestType.fromObject(request);
    var onReturnResultByRemote = this.channel.onCallMethodByLocal("%s", "%s", requestPayload);
    var requestPayloadData = requestType.encode(requestPayload).finish();

    this.channel.callMethod("%s", "%s", requestPayloadData, autoRetry, function(errorCode, responsePayloadData) {
        var response;

        if (errorCode == 0) {
            var responseType = root.%s;
            var responsePayload = responseType.decode(responsePayloadData);
            response = responseType.toObject(responsePayload, {defaults: true});
        } else {
            response = null;
        }

        if (onReturnResultByRemote != null) {
            onReturnResultByRemote(errorCode, response);
        }

        callback(errorCode, response);
    });
};
*/}), serviceName, methodName, method.requestType, serviceName, methodName, serviceName, methodName, method.responseType);
    });

    console.log(heredoc(function() {/*

exports.%sServiceClient = %sServiceClient;
*/}), serviceName, serviceName);
}

function generateServiceHandler(serviceFullName, serviceName, methods) {
    console.log(heredoc(function() {/*

function %sServiceHandler() {
}

%sServiceHandler.prototype.name = "%s";

%sServiceHandler.prototype.methodTable = {
*/}), serviceName, serviceName, serviceName, serviceName);

    Object.keys(methods).forEach(function(methodName) {
        var method = methods[methodName];

        console.log(heredoc(function() {/*
    "%s": function(channel, requestPayloadData, responseWriter) {
        var requestType = root.%s;
        var requestPayload = requestType.decode(requestPayloadData);
        var request = requestType.toObject(requestPayload, {defaults: true});
        var onReturnResultByLocal = channel.onCallMethodByRemote(this.name, "%s", request);

        this.%s(request, function(errorCode, response) {
            var responsePayloadData;

            if (errorCode == 0) {
                var responseType = root.%s;
                var errorMessage = responseType.verify(response);

                if (errorMessage != null) {
                    throw Error(errorMessage);
                }

                var responsePayload = responseType.fromObject(response);

                if (onReturnResultByLocal != null) {
                    onReturnResultByLocal(0, responsePayload);
                }

                responsePayloadData = responseType.encode(responsePayload).finish();
            } else {
                if (onReturnResultByLocal != null) {
                    onReturnResultByLocal(errorCode, null);
                }

                responsePayloadData = null;
            }

            responseWriter(errorCode, responsePayloadData);
        });
    },
*/}), methodName, method.requestType, methodName, methodName, method.responseType);
    });

    console.log(heredoc(function() {/*
};

exports.%sServiceHandler = %sServiceHandler;
*/}), serviceName, serviceName);
}

function heredoc(f) {
    return f.toString().slice(16, -4);
}

function main() {
    var buffer = "";

    process.stdin.on("data", function(data) {
        buffer += data;
    }).on("end", function() {
        var object = JSON.parse(buffer);
        generateStubs(object);
    }).setEncoding("utf8");
}

main();
